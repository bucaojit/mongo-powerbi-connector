# Evergreen Project Config

# When a task that used to pass starts to fail
# Go through all versions that may have been skipped to detect
# when the task started failing
stepback: true

# Mark a failure as a system/bootstrap failure (purple box) rather then a task
# failure by default.
# Actual testing tasks are marked with `type: test`
command_type: system

# Protect ourself against rogue test case, or curl gone wild, that runs forever
# 12 minutes is the longest we'll ever run
exec_timeout_secs: 3600 # 12 minutes is the longest we'll ever run

# What to do when evergreen hits the timeout (`post:` tasks are run automatically)
timeout:
  - command: shell.exec
    params:
      script: |
        ls -la

functions:
  "build connector":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongo-powerbi-connector
        script: |
          ${prepare_shell}
          if $UPDATE_PLUGIN_VERSION; then
            sed -i "s/\[Version = \"0.0.0\"\]/\[Version = \"${MONGO_POWERBI_CONNECTOR_VERSION}\"\]/g" \
              connector/MongoDBAtlasODBC.pq
          fi
          tools/MakePQX.exe compile connector/
          tools/MakePQX.exe pack -mz connector/bin/AnyCPU/Debug/connector.mez -t MongoDBAtlasODBC.pqx

  "fetch packaged connector":
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongo-powerbi-connector/artifacts/${version_id}/${build_variant}/MongoDBAtlasODBC.pqx
        local_file: mongo-powerbi-connector/MongoDBAtlasODBC.pqx
        bucket: mciuploads

  "fetch signed connector":
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongo-powerbi-connector/artifacts/${version_id}/${build_variant}/MongoDBAtlasODBC-signed.pqx
        local_file: mongo-powerbi-connector/MongoDBAtlasODBC-signed.pqx
        bucket: mciuploads

  "fetch powerbi source":
    - command: git.get_project
      params:
        directory: mongo-powerbi-connector

  "generate expansions":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongo-powerbi-connector
        script: |
          export CARGO_NET_GIT_FETCH_WITH_CLI=true
          export UNIX_ODBC_PATH="$PWD/unixodbc/install"
          export LD_LIBRARY_PATH="$UNIX_ODBC_PATH/lib"
          export PATH="$LD_LIBRARY_PATH:$PATH:$HOME/.cargo/bin"
          export MONGO_POWERBI_CONNECTOR_VERSION=$(git describe --always | sed 's/^v//g')
          export UPDATE_PLUGIN_VERSION=true
          git describe --exact-match HEAD || UPDATE_PLUGIN_VERSION=false

          cat <<EOT > expansions.yml
          MONGO_POWERBI_CONNECTOR_VERSION: "$MONGO_POWERBI_CONNECTOR_VERSION"
          UPDATE_PLUGIN_VERSION: "$UPDATE_PLUGIN_VERSION"
          prepare_shell: |
            set -o errexit
            export PATH="$PATH"
            export MONGO_POWERBI_CONNECTOR_VERSION="$MONGO_POWERBI_CONNECTOR_VERSION"
            export UPDATE_PLUGIN_VERSION="$UPDATE_PLUGIN_VERSION"
            export ADF_TEST_LOCAL_USER="${adf_test_local_user}"
            export ADF_TEST_LOCAL_PWD="${adf_test_local_pwd}"
            export ADF_TEST_LOCAL_AUTH_DB="${adf_test_local_auth_db}"
            export ADF_TEST_LOCAL_HOST="${adf_test_local_host}"
            export MDB_TEST_LOCAL_PORT="${mdb_test_local_port}"
            export PATH="$PATH"
            export CARGO_NET_GIT_FETCH_WITH_CLI="$CARGO_NET_GIT_FETCH_WITH_CLI"
          EOT
    - command: expansions.update
      params:
        file: mongo-powerbi-connector/expansions.yml

  "install mongoimport tool":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongo-powerbi-connector
        script: |
          ${prepare_shell}
          MONGO_TOOLS_VERSION=100.6.1
          curl -L -o mongodb-tools.zip \
            https://fastdl.mongodb.org/tools/db/mongodb-database-tools-windows-x86_64-$MONGO_TOOLS_VERSION.zip
          unzip -jn mongodb-tools.zip
          chmod +x mongoimport.exe

  "install power query tools":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongo-powerbi-connector
        script: |
          ${prepare_shell}
          curl  -L -o tools.zip https://www.nuget.org/api/v2/package/Microsoft.PowerQuery.SdkTools/
          unzip -n tools.zip
          chmod -R +x tools/*

  "install rust toolchain":
    - command: shell.exec
      params:
        shell: bash
        script: |
          ${prepare_shell}
          # make sure to use msvc toolchain rather than gnu, which is
          # the default for cygwin
          if [ "Windows_NT" == "$OS" ]; then
              if [ 'windows-64' == '${build_variant}' ]; then
                  export HOST="x86_64-pc-windows-msvc"
              else
                  echo 'unknown windows build variant ${build_variant}'
                  exit 1;
              fi
              export DEFAULT_HOST_OPTIONS="--default-host $HOST"
              export DEFAULT_TOOLCHAIN="stable-$HOST"
          fi
          # install rustup from scratch
          rm -rf ~/.rustup
          curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path $DEFAULT_HOST_OPTIONS
          # rustup installs into C:\Users\$USER instead of
          # C:\home\$USER, so we symlink both .rustup and .cargo
          if [ "Windows_NT" == "$OS" ]; then
              ln -sf /cygdrive/c/Users/$USER/.rustup/ ~/.rustup
              ln -sf /cygdrive/c/Users/$USER/.cargo/ ~/.cargo
              rustup toolchain install $DEFAULT_TOOLCHAIN
              rustup default $DEFAULT_TOOLCHAIN
          fi
          echo --------- rustup show -----------
          rustup show
          echo ----- Rustup toolchain list -----
          rustup toolchain list
          echo ---------------------------------

  "run integration test":
    - command: shell.exec
      params:
        add_expansions_to_env: true
        shell: bash
        working_dir: mongo-powerbi-connector
        script: |
          ${prepare_shell}
          set +e

          # Start local ADF
          ./resources/run_adf.sh start &&
          
          # Import dataset to MongoDB 
          ./mongoimport.exe --uri="mongodb://$ADF_TEST_LOCAL_HOST:$MDB_TEST_LOCAL_PORT/supplies" \
            --drop resources/integration_test/testdata/sales.json &&
          ./mongoimport.exe --uri="mongodb://$ADF_TEST_LOCAL_HOST:$MDB_TEST_LOCAL_PORT/integration_test" \
            --drop resources/integration_test/testdata/complex_types.json &&
          
          
          MONGOSHELL=$(find ./local_adf/ | grep mongo.exe | head -1) &&
          chmod +x $MONGOSHELL &&
          
          # Generate schema on imported data
          $MONGOSHELL -u $ADF_TEST_LOCAL_USER --password $ADF_TEST_LOCAL_PWD --authenticationDatabase \
            $ADF_TEST_LOCAL_AUTH_DB $ADF_TEST_LOCAL_HOST/admin \
            --eval 'db.runCommand({sqlGenerateSchema: 1, 
            sampleNamespaces: ["integration_test.complex_types", "supplies.sales"], setSchemas: true})' &&

          # Set credentials for the queryFile
          echo $(eval echo $(cat resources/credentials.json )) | tools/PQTest.exe set-credential \
            --extension MongoDBAtlasODBC.pqx \
            --queryFile connector/MongoDBAtlasODBC.integration-test.query.pq &&
          
          # Run Integration Test
          test_output=`tools/PQTest.exe run-test --extension MongoDBAtlasODBC.pqx \
            --queryFile connector/MongoDBAtlasODBC.integration-test.query.pq`
          EXITCODE=$?
          failures=`echo $test_output  | grep -Eo '"Result"[^}]*' | grep Failure || true` 
          echo $test_output > MongoDBAtlasODBC.integration-test.log 
          if [[ ! -z $failures ]]; then 
            echo "Failures Encountered:"
            echo $failures
            exit 1
          fi
          
          # Stop local ADF, always run this to keep task from hanging
          ./resources/run_adf.sh stop
          exit $EXITCODE

  "run unit-test":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongo-powerbi-connector
        script: |
          ${prepare_shell}
          test_output=`tools/PQTest.exe run-test --extension MongoDBAtlasODBC.pqx \
          --queryFile connector/MongoDBAtlasODBC.unit-test.query.pq` 
          failures=`echo $test_output  | grep -Eo '"Result"[^}]*' | grep Failure || true` 
          echo $test_output > MongoDBAtlasODBC.unit-test.log 
          if [[ ! -z $failures ]]; then 
            echo "Failures Encountered:"
            echo $failures
            exit 1
          fi

  "setup driver on Windows":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongo-powerbi-connector
        script: |
          ${prepare_shell}
          git clone git@github.com:mongodb/mongo-odbc-driver.git
          cd mongo-odbc-driver
          cargo build --release
          cp target/release/mongoodbc.dll ./mongoodbc.dll
          sed -i 's@%DRIVER_DLL_PATH%@'"$(echo "$(cygpath -w $(pwd))" | sed s',\\,\\\\\\\\,g')"'@' setup/setupDSN.reg
          reg import "setup\setupDSN.reg"
          echo "----- Registry entries after setup ----"
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\ODBC\ODBCINST.INI\ODBC Drivers" -s 2> /dev/null || true
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBCINST.INI\ODBC Drivers" -s 2> /dev/null || true
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBCINST.INI\ADF_ODBC_DRIVER" -s 2>/dev/null || true
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\ODBC\ODBCINST.INI\ADF_ODBC_DRIVER" -s 2> /dev/null || true
          echo "-------------------------"

  "clean up driver on Windows":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongo-powerbi-connector
        script:  |
          ${prepare_shell}
          cd mongo-odbc-driver
          reg import "setup\cleanup_driver.reg"
          echo "----- Registry entries after clean-up----"
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\ODBC\ODBCINST.INI\ODBC Drivers" -s 2> /dev/null || true
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBCINST.INI\ODBC Drivers" -s 2> /dev/null || true
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBCINST.INI\ADF_ODBC_DRIVER" -s 2>/dev/null || true
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\ODBC\ODBCINST.INI\ADF_ODBC_DRIVER" -s 2> /dev/null || true
          echo "-------------------------"

  "sign connector":
    - command: shell.exec
      type: system
      params:
        working_dir: mongo-powerbi-connector
        script: | 
          ${prepare_shell}
          # SQL-1128: Implement signing for connector pqx file
          cp MongoDBAtlasODBC.pqx MongoDBAtlasODBC-signed.pqx

  "upload packaged connector":
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongo-powerbi-connector/MongoDBAtlasODBC.pqx
        remote_file: mongo-powerbi-connector/artifacts/${version_id}/${build_variant}/MongoDBAtlasODBC.pqx
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream

  "upload release":
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongo-powerbi-connector/MongoDBAtlasODBC-signed.pqx
        remote_file: mongo-powerbi-connector/MongoDBAtlasODBC-${MONGO_POWERBI_CONNECTOR_VERSION}.pqx
        bucket: translators-connectors-releases
        permissions: public-read
        display_name: MongoDBAtlasODBC-${MONGO_POWERBI_CONNECTOR_VERSION}.pqx
        content_type: application/octet-stream

  "upload signed connector":
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongo-powerbi-connector/MongoDBAtlasODBC-signed.pqx
        remote_file: mongo-powerbi-connector/artifacts/${version_id}/${build_variant}/MongoDBAtlasODBC-signed.pqx
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream

  "upload integration test logs":
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongo-powerbi-connector/MongoDBAtlasODBC.integration-test.log
        remote_file: mongo-powerbi-connector/artifacts/${version_id}/${build_variant}/MongoDBAtlasODBC.integration-test.log
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream

  "upload unit test logs":
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongo-powerbi-connector/MongoDBAtlasODBC.unit-test.log
        remote_file: mongo-powerbi-connector/artifacts/${version_id}/${build_variant}/MongoDBAtlasODBC.unit-test.log
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream

pre:
  - func: "fetch powerbi source"
  - func: "generate expansions"
  - func: "install power query tools"
post: 
  - func: "upload unit test logs"
  - func: "upload integration test logs"

tasks:
  - name: build
    commands:
      - func: "build connector"
      - func: "upload packaged connector"

  - name: integration-test
    depends_on:
      - name: build
    commands:
      - func: "install rust toolchain"
      - func: "setup driver on Windows"
      - func: "fetch packaged connector"
      - func: "install mongoimport tool"
      - func: "run integration test"
      - func: "clean up driver on Windows"

  - name: unit-test
    depends_on:
      - name: build
    commands:
      - func: "fetch packaged connector"
      - func: "run unit-test"

  - name: sign
    depends_on:
      - name: build
      - name: unit-test
    commands:
      - func: "fetch packaged connector"
      - func: "sign connector"
      - func: "upload signed connector"

  - name: release
    git_tag_only: true
    depends_on:
      - name: sign
    commands:
      - func: "fetch signed connector"
      - func: "upload release"

buildvariants:
  - name: windows-64
    display_name: "Windows"
    run_on: [ windows-64-vs2019-large ]
    tasks:
      - name: build
      - name: unit-test
      - name: integration-test
      - name: sign
      - name: release
